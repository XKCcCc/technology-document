一、存储引擎
    （一）MySQL体系结构
        连接层、服务层、引擎层、存储层
    （二）存储引擎简介
        存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也被称为表类型。
        默认存储引擎InnoDB；
        1.查看数据库支持的存储引擎 show engines;
        2.创建表，并指定存储引擎
            create table my_memory
            (
                id int not null primary key auto_increment,
                name varchar(10) not null,
            )engine = MEMORY;
    (三)存储引擎的特点
        InnoDB：支持事务、外键、行级锁；
        MyISAM：支持表锁，不支持事务、外键、行锁，访问速度快；
        Memory：内存存放、支持Hash索引；

二、索引
    索引是帮助MySQL高效获取数据的数据结构。 
    优点：提高数据的检索效率；通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗；
    缺点：索引列也是要占用空间的；索引大大提高了查询效率，同时降低了更新表的速度，如对表进行增删改效率降低；
    索引结构的分类：B+tree索引、Hash索引、R-tree索引、Full-text索引
    为什么InnoDB存储引擎选择事业B+tree索引结构
        相对于二叉树，层级更少，搜索效率高；
        对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中的存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；
        相对于Hash索引，B+tree支持范围匹配及排序操作；
    索引分类
        主键索引：针对于表中主键创建的索引，默认自动创建，只能有一个，PRIMARY
        唯一索引：避免同一个表中某数据列中的值重复，可以有多个，UNIQUE
        常规索引：快速定位特定数据，可以有多个
        全文索引：全文索引查找的是文中的关键词，而不是比较索引，可以有多个，FULLTESXT
        InnoDB根据索引的存储形式，可以分为
            聚集索引：将数据存储于索引放到了一块，索引结构的叶子节点保存了行数据，必须有且只有一个
            二级索引：将数据与所引分开存储，索引结构的叶子节点关联的是对应的主键，可以存在多个
    索引语法
        创建索引 create [unique|fulltext] index index_name on 表名 index_col_name）;
        查看索引 show index from 表名;
        删除索引 drop index index_name on 表名;
    SQL性能分析
        查询当前数据库增删改查语句频次 show global status like "Com_______";
        慢查询日志
            查询状态 show variables like "slow_query_log";
            修改MySQL配置文件 /etc/my.cnf
            开启慢查询日志 slow_query_log = 1
            设置慢查询时间 long_query_time = 2
            查询慢查询日志 /var/lib/mysql/localhost-slow.log
        profile详情
            查看是否支持 profile select @@have_profiling;
            查看profile状态 select @@profiling;
            开启profile set profiling = 1;
            查看SQL耗时情况 show profiles;
            查看SQL各阶段耗时情况 show profile for query id;
        explain执行计划
            获取MySQL执行SQL的信息 explain select * from 表名 where id = 1;
            explain执行计划各字段含义
                id：select查询的序列号，表示查询中执行select子句或是操作表的顺序，id相同执行顺序从上到下，id不同，值越大越先执行；
                select_type：表示select的类型，常见的取值有simple（简单表）、primary（主查询）、union（union中的第二个或者后面的查询语句）、subquery（select/where之后包含了子查询）等；
                type：表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、index、all；
                possible_key：显示可能应用在这张表上的索引，一个或多个；
                key：实际使用的索引；
                key_len：索引中使用的字节数；
                rows:MySQL认为必须要执行查询的行数
                filtered：表示返回结果的行数占需读取行数的百分比；
    索引使用
        验证索引效率
            未建立索引前执行SQL语句查看SQL的耗时；
            针对字段创建索引；
            再次执行相同的SQL语句，再次查看SQL的耗时；
        索引的使用法则
            最左前缀法则：如果使用联合索引，要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列，如果跳过某一列，索引将部分失效；
            范围查询：如果使用联合索引，出现范围查询（>,<），范围查询右侧的列索引失效；
            索引列运算：不要再索引列上进行运算操作，否则索引将失效；
            字符串不加引号：字符串类型字段使用时，不加引号，索引将失效；
            模糊查询：如果仅是尾部模糊匹配，索引不会失效，如果是头部模糊匹配，索引失效；
            or连接的条件：用or分开的条件，如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到；
            数据分布影响：如果MySQL评估使用索引比全表更慢，则不使用索引；
            SQL提示：SQL提示是优化数据库的一个重要手段，简单来说，就是再SQ语句中加入一些人为的提示来达到优化操作的目的；
                在SQL语句中加入use index()、ignore index()、force index();
            覆盖索引：尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到），减少select *；
            前缀索引：当字段类型未字符串（varchar、char等）时，有时候需要所有很长的字符串，这会让索引变得很大，查询时浪费大量的磁盘IO，影响查询效率，此时可以只将自负床的一部分前缀建立索引，这样可以大大节约索引空间，从而提高索引效率；
            单列索引与联合索引：建议使用联合索引；
    索引设计原则
        针对于数据量较大，且查询比较评分的表建立索引。
        针对于常作为查询条件（where）、排序（order）、分组（group by）操作的字段建立索引；
        精良选择区分度高的列作为索引，尽量建立唯一索引，区分度高，使用索引的效率越高；
        如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引；
        尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率；
        要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率；
        如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它，当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询；

三、SQL优化

四、视图/存储过程/触发器

五、锁

六、InnoDB引擎

七、MySQL管理
