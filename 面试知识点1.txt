一、Session/Cookie
    Cookie:有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息.
    Session:在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。
    （一）Session和Cookie的区别：
        1.对象不同
            cookie：是针对每个网站的信息，每个网站只能对应一个，其他网站无法访问，这个文件保存在客户端，每次您拨打相应网站，浏览器都会查找该网站的 cookies，如果有，则会将该文件发送出去。cookies文件的内容大致上包括了诸如用户名、密码、设置等信息。
            session：是针对每个用户的，只有客户端才能访问，程序为该客户添加一个 session。session中主要保存用户的登录信息、操作信息等等。此session将在用户访问结束后自动消失(如果也是超时)。
        2.存储数据大小不同
            cookie：一个 cookie存储的数据不超过3K。
            session：session存储在服务器上可以任意存储数据。当 session存储数据太多时，服务器可选择进行清理。
        3.生命周期不同
            cookie：cookie的生命周期当浏览器关闭的时候就消亡了，cookie的生命周期是累计的，从创建时就开始计时，30min后cookie生命周期结束。
            session：session的生命周期是间隔的，从创建时开始计时如在30min内没有访问session，那么session生命周期就被销毁。
        4.存储位置不同
            cookie：cookie数据保存在客户端。
            session：session数据保存在服务器端。
        5.数据类型不同
            两者都是key-value结构，但针对value的类型是有差异的。
            cookie：value只能是字符串类型。
            session：value是object类型。
        6.安全性不同
            cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，如果主要考虑到安全应当使用session。
    
二、POST/GET
    GET请求:从指定的资源请求数据，用于获取数据，一般用于搜索排序和筛选之类的操作。
    POST请求:向指定的资源提交要被处理的数据，用于将数据发送给服务器，一般用于修改和写入数据。
    （一）POST和GET的区别：
        1.post请求更安全（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中，get请求的是静态资源，则会缓存，如果是数据，则不会缓存）
        2.post请求发送的数据更大（get请求有url长度限制，http协议本身不限制，请求长度限制是由浏览器和web服务器决定和设置）
        3.post请求能发送更多的数据类型（get请求只能发送ASCII字符）
        4.传参方式不同（get请求参数通过url传递，post请求放在request body中传递）
        5.get请求产生一个TCP数据包；post请求产生两个TCP数据包（get请求，浏览器会把http header和data一并发送出去，服务器响应200返回数据；post请求，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 返回数据）

三、http状态码
    200 OK——客户端发来的请求在服务器端被正常处理在响应报文中，随状态码返回的信息会因方法的不同而改变。比如，使用GET时对应请求资源的实体
    204 No Content——服务器接收的请求已成功处理，但返回的响应报文中不含实体的主体部分，即无资源可返回一般在只需从客户端往服务器发送信息，
    206 Partial Content——服务器成功执行了客户端发来的范围GET请求。
    301 Moved Permanently——永久重定向（请求的资源已被分配新的URL，以后应使用资源现在所指的URL）。
    302 Found——临时重定向（请求的资源已被分配新的URL，希望用户本次使用新的URL）。
    303 See Other——由于请求对应的资源存在着另一个URL，应使用GET方法定向获取请求的资源，与302功能相同，但不同点在于303要求使用GET方法获
    304 Not Modified——客户端发送附带条件的请求时，，服务器端允许请求访问资源，但请求未满足条件。
    307 Temporary Redirect——临时重定向，但请求方式不会从POST变为GET与302含义相同，但是302规定的禁止POST变为GET并不被遵守，而307严格遵
    400 Bad Request——请求报文中存在语法错误。
    401 Unauthorized——发送的请求需有通过HTTP认证的认证信息当浏览器初次接收401，会弹出认证用的对话窗口；若之前已进行过1次请求，则表示用
    403 Forbidden——对请求资源的访问被服务器拒绝了
    404 Not Found——服务器上无法找到请求的资源
    500 Internal Server Error——服务器在执行请求时发生错误
    503 Service Unavailable——服务器暂处于超负载或正在进行停机维护，现在无法处理请求

四、TCP三次握手四次挥手
    1.三次握手：
        a:首先客户端先向服务器端发送一个TCP报文，b:服务器端收到来自客户端的TCP报文之后,结束LISTEN阶段。并返回一段报文，c:客户端接收到来自服务器确认收到数据的TCP报文后，明确了从客户端到服务器的数据传输是正常的，结束SYN-SENT阶段，并返回一段TCP报文；
    2.四次挥手：
        a:首先客户端想要释放连接，向服务器端发送一段TCP报文，b:服务器端接收到从客户端发出的TCP报文之后，确认了客户端想要释放连接，随后服务器端结束ESTABLISHED阶段，进入CLOSE-WAIT阶段（半关闭状态）并返回一段TCP报文，c:服务器端自从发出ACK确认报文之后，经过CLOSED-WAIT阶段，做好了释放服务器端到客户端方向上的连接准备，再次向客户端发出一段TCP报文，d:客户端收到从服务器端发出的TCP报文，确认了服务器端已做好释放连接的准备，结束FIN-WAIT-2阶段，进入TIME-WAIT阶段，并向服务器端发送一段报文，
    3.为什么握手是三次，挥手要四次？
        3.1握手三次（即在一次握手就可以搞定ACK+SYN）
            TCP建立连接时之所以只需要"三次握手"，是因为在第二次"握手"过程中，服务器端发送给客户端的TCP报文是以SYN与ACK作为标志位的。SYN是请求连接标志，表示服务器端同意建立连接；ACK是确认报文，表示告诉客户端，服务器端收到了它的请求报文。即SYN建立连接报文与ACK确认接收报文是在同一次"握手"当中传输的，所以"三次握手"不多也不少，正好让双方明确彼此信息互通。
        3.2挥手四次
            TCP释放连接时之所以需要“四次挥手”,是因为FIN释放连接报文与ACK确认接收报文是分别由第二次和第三次"握手"传输的。
            3.2.1为何建立连接时一起传输，释放连接时却要分开传输？
                建立连接时，被动方服务器端结束CLOSED阶段进入“握手”阶段并不需要任何准备，可以直接返回SYN和ACK报文，开始建立连接。释放连接时，被动方服务器，突然收到主动方客户端释放连接的请求时并不能立即释放连接，因为还有必要的数据需要处理，所以服务器先返回ACK确认收到报文，经过CLOSE-WAIT阶段准备好释放连接之后，才能返回FIN释放连接报文。

五、PHP
    （一）基本类型：
        1.布尔型boolean：在php中布尔型的值只有两种 true false但是在一些运算符，函数或者流程控制中一些其他类型的特殊值会被转为布尔型。
        2.整型integer：没什么说的
        3.浮点型float：没有什么好说的。在php中使用float和double是一样的。
        4.字符串string：字符串可以分为被单引号包括起来，和双引号包括起来的区别：单引号不再解析字符串中的变量，除了' \ 可以转义以外，任何其他都不转义，因此运行效率高。双引号会解析字符串中的变量，也会转义。
        5.数组array：数组是php最大的优点。
        6.对象object：对象是由一组属性和一组方法组成的。
        7.资源resource：是一种特殊的变量，保存外部资源的引用，相当于一个句柄。
        8.NULL型： NULL型的值只有null 而且不区分大小写，null只是表示一个变量的
    （二）STATIC/GLOBAL:
        global:[用于在函数内使用全局变量+值不变]在php中function体内无法使用全局变量，如果要使用的话，需要使用global关键字先声明在使用;
        static:[用于保留局部变量一直存在+值可变]当函数运行完毕时，函数内的变量都会被消除，如果还需要使用不希望被删除的话，使用static关键字。仅在第一次声明变量的时候使用。
    （三）常用函数
        1.数组函数
            is_array() 检测是否是数组
            in_array() 检查数组中书否存在某个值
            count() 计算数组长度
            min() 找出最小值
            max() 找出最大值
            ksort() 对数组根据键名升序排序
            reset() 将数组的内部指针指向第一个单元
            end() 将数组的内部指针指向最后一个单元
            array_push() 将一个或多个单元压入数组的末尾（入栈）
            array_pop() 弹出数组最后一个单元（出栈）
            array_shift() 将数组开头的单元移出数组
            array_unshift() 在数组开头插入一个或多个单元
            array_merge() 合并一个或多个数组
            array_slice() 从数组中取出一段
            array_map() 为数组的每个元素应用回调函数
            array_filter() 使用回调函数过滤数组的元素
            array_diff() 计算数组的差集
            array_reverse() 返回单元顺序相反的数组
            array_unique() 移除数组中重复的值
            array_search() 在数组中搜索给定的值，如果成功则返回首个相应的键名
            array_keys() 返回数组中部分的或所有的键名
            array_values() 返回数组中所有的值
            array_key_exists() 检查数组里是否有指定的键名或索引
        2.字符串函数
            explode() 使用一个字符串分割另一个字符串
            implode() 用字符串连接数组元素
            trim() 去除字符串首尾处的空白字符（或者其他字符）
            ltrim() 删除字符串开头的空白字符（或其他字符）
            rtrim() 删除字符串末端的空白字符（或者其他字符）
            is_string() 查找变量的类型是否是字符串
            strlen() 获取字符串长度在
            substr() 返回字符串的子串
            sprintf() 返回格式化字符串
            strpos() 查找字符串首次出现的位置
            str_replace() 子字符串替换
            str_repeat() 重复一个字符串
            strtolower() 将字符串转化为小写
            strtoupper() 将字符串转化为大写
            ucfirst() 将字符串的首字母转换为大写
            strrpos() 计算指定字符串在目标字符串中最后一次出现的位置
            strtotime() 将任何英文文本日期时间描述解析为 Unix 时间戳
            chr() 从数字生成单字节字符串
            ord() 转换字符串第一个字节为 0-255 之间的值
            strtr() 转换字符或替换字串
            htmlspecialchars() 将特殊字符转换为 HTML 实体
            version_compare() 对比两个「PHP 规范化」的版本数字字符串
        3.文件函数
            is_dir() 判断给定文件名是否是一个目录
            is_file() 判断给定文件名是否为一个正常的文件
            file_exists() 检查文件或目录是否存码
            fopen() 打开文件或者 URL
            fclose() 关闭一个已打开的文件指针
            fwrite() 写入文件（可安全用于二进制文件）
            mkdir() 新建目录
            unlink() 删除文件
            file_get_contents() 将整个文件读入一个字符串
            file_put_contents() 将数据写入文件
        4.正则函数
            preg_replace() 执行一个正则表达式的搜索和替换
            preg_match() 执行匹配正则表达式
            preg_match_all() 执行一个全局正则表达式匹配
            preg_split() 通过一个正则表达式分隔字符串
        5.url函数
            parse_url() 解析 URL，返回其组成部分
            urlencode() 编码 URL 字符串
            dirname() 返回路径中的目录部分
            basename() 返回路径中的文件名部分
            realpath() 返回规范化的绝对路径名
        6.其他函数1
            defined() 检查某个名称的常量是否存在
            function_exists() 如果给定的函数已经被定义就返回 true
            is_object() 查找变量是否是对象
            class_exists() 查类是否已经定义
            get_class() 返回对象的类名
            gettype() 获取变量的类型
            is_int() 检测变量是否是整数
            is_numeric() 检测变量是否为数字或数字字符串
            is_null() 检测变量是否是 null
            intval() 获取变量的整数值
            is_bool() 检测变量是否是布尔值
            method_exists() 检查类的方法是否存在
            floor() 舍去法取整
            ceil() 进一法取整
            round() 对浮点数进行四舍五入
        7.其他函数2
            uniqid() 生成一个唯一ID
            md5() 计算字符串的 MD5 散列值
            func_get_args() 返回一个包含函数参数列表的数组
            serialize() 生成值的可存储表示
            call_user_func() 把第一个参数作为回调函数调用
            call_user_func_array() 调用回调函数，并把一个数组参数作为回调函数的参数
            is_callable() 验证值是否可以在当前范围内作为函数调用
            base64_encode() 使用 MIME base64 对数据进行编码
            json_decode() 对 JSON 格式的字符串进行解码
            json_encode() 对变量进行 JSON 编
            time() 返回当前的 Unix 时间戳
            date() 格式化 Unix 时间戳
            microtime() 返回当前 Unix 时间戳和微秒数
            error_reporting int设置错误报告级别。
            ini_get() 获取一个配置选项的值
            ini_set() 为一个配置选项设置值
            ob_start() 打开输出控制缓冲
            header() 发送原生 HTTP 头
            extension_loaded() 检查一个扩展是否已经加载
            print_r() 打印人类可读的变量信息
    （四）php的设计模式   
        策略模式、工厂模式、单例模式、注册模式、适配器模式
    （五）PHP 中传值与传引用的区别
        按值传递：函数范围内对值的任何改变在函数外部都会被忽略
        按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改
        优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。按引用传递则不需要复制值，对于性能提
        高很有好处。
    （六）TP的特性
        1.多表查询非常方便,在model中几句代码就可以完成对多表的关联操作
        2.融合了smarty模板,使前后台分离
        3.支持多种缓存技术,尤其对memcache技术支持非常好
        4.命名规范,模型,视图,控制器严格遵循命名规则,通过命名一一对应
        5.支持多种url模式
        6.内置ajax返回方法,包括xml,json,html等
        7.支持应用扩展,类库扩展,驱动扩展等

六、MySQL
    （一）事务的四大特性
        事务特性：原子性、一致性、隔离性、持久性
    （二）数据库的三大范式
        第一范式1NF：确保数据库表字段的原子性。
        第二范式2NF：首先要满足第一范式，另外包含两部分内容，一是表必须有一个主键；二是非主键列必须完全依赖于主键，而不能只依赖于主键的一部分。
        第三范式3NF：首先要满足第二范式，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。
    （三）索引
        索引是存储引擎用于提高数据库表的访问速度的一种数据结构。
        1.索引的作用
            数据是存储在磁盘上的，查询数据时，如果没有索引，会加载所有的数据到内存，依次进行检索，读取磁盘次数较多。有了索引，就不需要加载所有数据，因为B+树的高度一般在2-4层，最多只需要读取2-4次磁盘，查询速度大大提升。
        2.索引有什么分类？
            2.1主键索引：名为primary的唯一非空索引，不允许有空值。
            2.2唯一索引：索引列中的值必须是唯一的，但是允许为空值。唯一索引和主键索引的区别是：唯一约束的列可以为null且可以存在多个null值。唯一
        3.索引的用途：唯一标识数据库表中的每条记录，主要是用来防止数据重复插入。创建唯一索引的SQL语句如下：
    （四）常见的存储引擎
        MySQL中常用的四种存储引擎分别是： MyISAM、InnoDB、MEMORY、ARCHIVE。MySQL 5.5版本后默认的存储引擎为InnoDB。

七、Redis
    1.Redis是什么？
        Redis是一个key-value存储系统，它支持存储的value类型相对更多，包括string、list、set、zset（sorted set --有序集合）和hash。这些数据结构都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis支持各种不同方式的排序。为了保证效率，数据都是缓存在内存中，Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave（主从）同步。
    2.Redis的功能
        基于本机内存的缓存、持久化的功能、哨兵和复制、集群
    3.Redis支持的数据类型
        string、hash、list、set、zset
    4.保证缓存和数据库数据的一致性
        延时双删策略

八、LAMP
    LAMP指的是Linux（操作系统）、Apache（HTTP服务器）、MySQL（也指MariaDB，数据库软件）和PHP（有时也是指Perl或Python）的第一个字母，一般用来建立web应用平台。
    （一）Apache web服务器
        Apache web 服务器是一个非常流行、功能强大并且开源，用于管理web站点并向网络提供web文件服务. 它基于 HTTP 超文本传输协议运行, 这一协议提供了服务器和客户端web浏览器通信的标准. 它支持 SSL, CGI 文件, 虚拟主机还有许多其它的功能特性。
        1.Apache主配置文件
            /etc/httpd/conf/httpd.conf     /etc/apache2.conf
        2.Apache监听端口
            改变Apache的默认端口，打开Apache主配置文件 httpd.conf 或者 apache2.conf修改Listen
        3.DocumentRoot
            默认的DocumentRoot是 /var/www/html 或者 /var/www. 这是可以被修改的
    （二）Nginx
        Nginx是一个 轻量级/高性能的反向代理Web服务器，用于 HTTP、HTTPS、SMTP、POP3 和 IMAP 协议。他实现非常高效的反向代理、负载平衡，他可以处理2-3万并发连接数，官方监测能支持5万并发，现在中国使用nginx网站用户有很多，例如：新浪、网易、 腾讯等。
    （三）正向代理
        一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。正向代理总结就一句话：代理端代理的是客户端。
    （四）反向代理
        反向代理（Reverse Proxy）方式，是指以代理服务器来接受 Internet上的连接请求，然后将请求，发给内部网络上的服务器并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。反向代理总结就一句话：代理端代理的是服务端。
    （五）反向代理服务器的优点是什么?
        反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。

九、查找
    1.顺序查找
        $arr=array(46,90,900,0,-1,-1);
        function search(&$arr,$findVal){
            $flag=false;
            for($i=0;$i<count($arr);$i++){
                 if($findVal==$arr[$i]){
                     echo "找到了，下标为=$i";
                     $flag=true;
                     //break;
                  }
             }
             if(!$flag){
                 echo '查询不到';
              }
        }
        search($arr,-1);
    2.折半查找
        function binarySearch(&$arr,$findVal,$leftIndex,$rightIndex){
              //当 $rightIndex<$leftIndex 说明没有数
              //为什么
              if($rightIndex<$leftIndex){
                   echo "找不到该数";
                   return ;
              }
              //找到中间这个数
              $middleIndex=round(($rightIndex+$leftIndex)/2);//函数round：四舍五入
              //如果大于则，向后面找
              if($findVal>$arr[$middleIndex]){
                   binarySearch($arr,$findVal,$middleIndex+1,$rightIndex);
              }
              //如果是小于中间这个数，则向前面找
              else if($findVal<$arr[$middleIndex]){
                   binarySearch($arr,$findVal,$leftIndex,$middleIndex-1);
              }else{
                   echo "找到这个数 下标是 $middleIndex";
              }
        }

十、排序
    1.直接插入排序
        function insertSort($arr) {
            $len = count($arr);
            for($i = 1; $i < $len; $i++) {
                if($arr[$i-1] > $arr[i]) {
                    for($j = $i - 1;$j >= 0; $j-- ) {
                        $tmp = $arr[$j+1];
                        if($tmp < $arr[$j]) {
                            $arr[$j+1] = $arr[$j];
                            $arr[$j] = $tmp;
                        }
                        else{
                            break;
                        }
                    }
                }
            }
            return $arr;
        }
    2.冒泡排序
        function bubbleSort($arr) {
            $len = count($arr);
            for($i = 1; $i < $len; $i++) {
                for($j = 0; $j < $len-$i; $j++) {
                    if($arr[$j] > $arr[$j+1]) {
                        $tmp = $arr[$j+1];
                        $arr[$j+1] = $arr[$j];
                        $arr[$j] = $tmp;
                    }
                }
            }
            return $arr;
        }
    3.简单选择排序
        function selectSort($arr) {
            $len = count($arr);
            for($i = 0; $i < $len; $i++) {
                $k = $i;
                for($j = $i+1; $j < $len; $j++) {
                    if($arr[$k] > $arr[$j]) {
                    $k = $j;
                    }
                }
                if($k != $i) {
                    $tmp = $arr[$i];
                    $arr[$i] = $arr[$k];
                    $arr[$k] = $tmp;
                }
            }
            return $arr;
        }

十一、MVC
    MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型Model）、视图（View）和控制器（Controller）。
    1.控制器Controller：对请求进行处理，负责请求转发；
    2.视图View：界面设计人员进行图形界面设计；
    3.模型Model：程序编写程序应用的功能（实现算法等等）、数据库管理；

十二、OOP
    oop一般指面向对象程序设计，作为一种新方法，其本质是以建立模型体现出来的抽象思维过程和面向对象的方法。模型是用来反映现实世界中事物特征的。任何一个模型都不可能反映客观事物的一切具体特征，只能对事物特征和变化规律的一种抽象，且在它所涉及的范围内更普遍、更集中、更深刻地描述客体的特征。通过建立模型而达到的抽象是人们对客体认识的深化。
    面向对象程序设计方法是尽可能模拟人类的思维方式，使得软件的开发方法与过程尽可能接近人类认识世界、解决现实问题的方法和过程，也即使得描述问题的问题空间与问题的解决方案空间在结构上尽可能一致，把客观世界中的实体抽象为问题域中的对象。
    （一）OOP特征分别是封装、继承、多态：
        1.封装：封装是指将对象信息状态通过访问权限修饰符隐藏在对象内部，不允许外部程序直接访问，如果外部程序要访问对象内部，可以调用内部提供的get或set方法。
        2.继承：子类继承了父类所有的成员方法和属性，并且可以拥有自己特性。继承解决了代码的重用问题
        3.多态：父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性。
    （二）五大基本原则：
        1.单一职责原则SRP(Single Responsibility Principle) 类的功能要单一，不能包罗万象，跟杂货铺似的。
        2.开放封闭原则OCP(Open－Close Principle)一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，一万个不乐意。
        3.里式替换原则LSP(the Liskov Substitution Principle LSP)子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活。
        4.依赖倒置原则DIP(the Dependency Inversion Principle DIP)高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的是抽象的中国人，而不是你是xx村的。
        5.接口分离原则ISP(the Interface Segregation Principle ISP)设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多。

十三、超全局变量
    PHP 有 9 个超全局变量:$_SERVER、$_GET、$_POST、$_REQUEST、$_COOKIE、$_SESSION、$_FILES、$_ENV、$GLOBALS；
    1.$_SERVER: 一个包含了诸如头信息（header）、路径（path）、以及脚本位置（srcipt location）等信息的数组。这个数组中的项目由Web服务器创建。
    2.$_GET 可以获取到使用 get 方法传递的参数的相关信息。
    3.$_POST 可以获取到使用 post 方法传递的参数的相关信息。
    4.$_REQUEST 是一个关联数组，默认包含 $_GET、$_POST、$_COOKIE 中的内容。建议不用这个超级变量，因为它不够安全。
    5.$_COOKIE 是一个关联数组，包含 通过 HTTP cookie 传递给当前脚本的内容。
    6.$_SESSION 是一个关联数组，包含当前脚本中的所有 session 内容。
    7.$_FILES 是一个关联数组，包含通过 HTTP POST 方法上传给当前脚本的文件内容。
    8.$_ENV 是一个包含服务器端环境变量的数组。
    9.$GLOBALS 是一个关联数组， 包含对当前脚本全局 范围内定义的所有变量。
